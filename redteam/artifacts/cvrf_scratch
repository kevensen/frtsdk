from datetime import datetime
from mongoengine import Document
from mongoengine import StringField
from mongoengine import DateTimeField
from mongoengine import ListField
from mongoengine import DictField
from sdam.sources.update_announce import PRODUCT_REGEX
from sdam.sources.update_announce import CVE_REGEX
from sdam.sources.update_announce import PACAKGE_NAME_REGEX
from sdam.sources.update_announce import PACAKGE_RELEASE_REGEX
from sdam.sources.update_announce import PACAKGE_VERSION_REGEX
from sdam.sources.update_announce import ADVISORY_REGEX
from sdam.sources.update_announce import ALT_ADVISORY_REGEX
from sdam.sources.update_announce import BUGZILLA_REGEX
from sdam.sources.update_announce import SEVERITIES
from sdam.sources.update_announce import SUMMARY_REGEX
from sdam.sources.nvd import CveItem


class UpdateAnnounceMessage(Document):
    messageId = StringField(primary_key=True)
    text = StringField(required=True)
    message_date = DateTimeField(required=True)
    
    product = StringField(required=False)
    cpestring = StringField(required=False)
    cve_list = ListField(StringField())
    rpm_list = ListField(StringField())

    advisory_id = StringField(required=True)
    advisory_date = DateTimeField(required=True)
    advisory_type = StringField(required=True)
    bugzillas = ListField(DictField())

    severity = StringField(required=False, default="")
    summary = StringField()

    meta = {'db_alias': 'sda',
            'ordering': ['-advisory_date']}

    def __init__(self, **kwargs):
        super(UpdateAnnounceMessage, self).__init__()
        if not self.messageId:
            try:
                self.messageId = kwargs['message_id']
            except KeyError:
                self.messageId = kwargs['messageId']

        self.text = kwargs['text']
        if isinstance(kwargs['message_date'], datetime):
            self.message_date = kwargs['message_date']
        else:
            simple_date = kwargs['message_date']
            if '+' in simple_date:
                simple_date = simple_date.split('+')[0].strip()
            elif '-' in simple_date:
                simple_date = simple_date.split('-')[0].strip()

            self.message_date = datetime.strptime(simple_date, '%a, %d %b %Y %H:%M:%S')


        advisory_match = ADVISORY_REGEX.search(self.text)
        try:
            self.advisory_date = datetime.strptime(advisory_match.group(2), '%Y-%m-%d %H:%M')
        except ValueError:
            self.advisory_date = datetime.strptime(advisory_match.group(2), '%Y-%m-%d')
        except AttributeError:
            advisory_match = ALT_ADVISORY_REGEX.search(self.text)
            self.advisory_date = self.message_date
        self.advisory_id = advisory_match.group(1)

        self.advisory_type = self.advisory_id.split('-')[0]


        self.product = PRODUCT_REGEX.search(self.text).group(1)

        if 'Fedora' in self.product:
            self.cpestring = "cpe:/o:fedoraproject:fedora:" + self.product.split(" ")[1]
        elif 'Fedora' in self.product:
            self.cpestring = "cpe:/o:fedoraproject:fedora:" + self.product.split(" ")[1]

        self.cve_list = list(set(CVE_REGEX.findall(self.text)))

        try:
            package_name = PACAKGE_NAME_REGEX.search(self.text).group(1)
            package_version = PACAKGE_VERSION_REGEX.search(self.text).group(1)
            package_release = PACAKGE_RELEASE_REGEX.search(self.text).group(1)

            package_full_name = '-'.join([package_name, package_version, package_release]).replace(" ", "").replace("=", "")

            self.rpm_list.append(package_full_name)

        except (AttributeError, IndexError):
            pass

        matches = BUGZILLA_REGEX.findall(self.text)
        if matches:
            for match in matches:
                # pylint: disable=E1101
                self.bugzillas.append(dict(id=match[1],
                                           description=match[2],
                                           url=match[3]))

        severity = "NONE"
        # pylint: disable=E1101
        cve_items = CveItem.objects.filter(cveid__in=self.cve_list)
        for cve_item in cve_items:
            try:
                if SEVERITIES[cve_item.cvss3severity] > SEVERITIES[severity]:
                    severity = cve_item.cvss3severity
            except KeyError:
                pass
        self.severity = severity.lower()

        self.summary = SUMMARY_REGEX.search(self.text).group(1)


    @property
    def product_family(self):
        if self.advisory_id.startswith("FEDORA"):
            return "Fedora Project"
        elif self.advisory_id.startswith("CEBA"):
            return "CentOS"
        return "Red Hat Enterprise Linux"




