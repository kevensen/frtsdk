#!/usr/bin/env python
import argparse
from datetime import datetime
import os
import sys
sys.path.append("../")
# pylint: disable=C0413,W0406
from redteam import RedTeam
from redteam import ALLOWED_LOGGING_LEVELS


def valid_iso_date(search_date):
    try:
        return datetime.strptime(search_date, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(search_date)
        raise argparse.ArgumentTypeError(msg)

def valid_severity(severity):
    severities = ['low', 'moderate', 'high', 'critical']
    if severity not in severities:
        msg = "Not a valid severity: '{0}'.".format(severity)
        raise argparse.ArgumentTypeError(msg)
    return severity

def main():
    parser = argparse.ArgumentParser(description='Tool to generate and serve the Enterprise Linux Security Data API.')
    subparsers = parser.add_subparsers()
    dir_path = os.path.dirname(os.path.realpath(__file__))
    default_api_dir = os.path.join(dir_path, '..', 'security-data-api')
    # General Options
    parser.add_argument('--notlsverify',
                        required=False,
                        action='store_true')

    parser.add_argument('--mongohost',
                        required=False,
                        type=str,
                        default='localhost')

    parser.add_argument('--mongoport',
                        required=False,
                        type=int,
                        default=27017)
    
    parser.add_argument('--mongouser',
                        required=False,
                        type=str)

    parser.add_argument('--mongopassword',
                        required=False,
                        type=str)
        
    parser.add_argument('--mongodb',
                        required=False,
                        default='sda',
                        type=str)
    
    parser.add_argument('--loglevel',
                        required=False,
                        default='info',
                        type=str)

    build_parser = subparsers.add_parser('build')
    build_parser.set_defaults(which='build')

    build_parser.add_argument('--all',
                              required=False,
                              action='store_true',
                              help='Rebuild data from May 2006.  If omitted, only recent (last 30 days) is rebuilt.')
    build_parser.add_argument('--force',
                              required=False,
                              action='store_true',
                              help='Only used with --all to drop existing data.  If omitted, only build missing data.')

    build_parser.add_argument('--update',
                              required=False,
                              action='store_true',
                              help='In addition to downloading data, update existing data if new data exists.')
    
    cve_parser = subparsers.add_parser('cve')
    cve_parser.set_defaults(which='cve')

    cve_format_group = cve_parser.add_mutually_exclusive_group()
    cve_format_group.add_argument('--json', action='store_const',
                                  dest='format', const='j', default='j')
    cve_format_group.add_argument('--xml', action='store_const',
                                  dest='format', const='x')
    cve_format_group.add_argument('--html', action='store_const',
                                  dest='format', const='h')

    cve_parser.add_argument('--before',
                            type=valid_iso_date,
                            help="CVEs before the query date. [ISO 8601 is the expected format]",
                            required=False)
    cve_parser.add_argument('--after',
                            type=valid_iso_date,
                            help="CVEs after the query date. [ISO 8601 is the expected format]",
                            required=False)
    cve_parser.add_argument('--bug',
                            type=str,
                            help="CVEs for Bugzilla Ids",
                            required=False)
    cve_parser.add_argument('--advisory',
                            type=str,
                            help="CVEs for advisory",
                            required=False)
    cve_parser.add_argument('--severity',
                            type=str,
                            help="CVEs for severity",
                            required=False)
    cve_parser.add_argument('--package',
                            type=str,
                            help="CVEs which affect the package",
                            required=False)
    cve_parser.add_argument('--product',
                            type=str,
                            help="CVEs which affect the product. The parameter supports Perl compatible regular expressions.",
                            required=False)
    cve_parser.add_argument('--cwe',
                            type=str,
                            help="CVEs with CWE",
                            required=False)
    cve_parser.add_argument('--cvss_score',
                            type=float,
                            help="CVEs with CVSS score greater than or equal to this value",
                            required=False)
    cve_parser.add_argument('--cvss3_score',
                            type=float,
                            help="CVEs with CVSSv3 score greater than or equal to this value",
                            required=False)
    cve_parser.add_argument('--per_page',
                            type=int,
                            help="Number of CVEs to return per page",
                            default=1000,
                            required=False)
    cve_parser.add_argument('--page',
                            type=int,
                            help="CVEs for page number",
                            default=1,
                            required=False)



    cvrf_parser = subparsers.add_parser('cvrf')
    cvrf_parser.set_defaults(which='cvrf')

    cvrf_format_group = cvrf_parser.add_mutually_exclusive_group()
    cvrf_format_group.add_argument('--json', action='store_const',
                                   dest='format', const='j', default='j')
    cvrf_format_group.add_argument('--xml', action='store_const',
                                   dest='format', const='x')
    cvrf_format_group.add_argument('--html', action='store_const',
                                   dest='format', const='h')

    cvrf_parser.add_argument('--before',
                             type=valid_iso_date,
                             help="Index of CVRF documents before the query date. [ISO 8601 is the expected format]",
                             required=False)
    cvrf_parser.add_argument('--after',
                             type=valid_iso_date,
                             help="Index of CVRF documents after the query date. [ISO 8601 is the expected format]",
                             required=False)
    cvrf_parser.add_argument('--bug',
                             type=str,
                             help="Index of CVRF documents for Bugzilla Ids",
                             required=False)
    cvrf_parser.add_argument('--cve',
                             type=str,
                             help="Index of CVRF documents for CVEs",
                             required=False)
    cvrf_parser.add_argument('--severity',
                             type=valid_severity,
                             help="Index of CVRF documents for severity",
                             required=False)
    cvrf_parser.add_argument('--package',
                               type=str,
                               help="Index of CVRF documents which contain package",
                               required=False)
    cvrf_parser.add_argument('--per_page',
                             type=int,
                             help="Number of CVEs to return per page",
                             default=1000,
                             required=False)
    cvrf_parser.add_argument('--page',
                             type=int,
                             help="CVEs for page number",
                             default=1,
                             required=False)

    cvrfid_parser = subparsers.add_parser('cvrfid')
    cvrfid_parser.set_defaults(which='cvrfid')

    cvrfid_parser.add_argument('cvrf',
                               type=str)

    cvrfid_format_group = cvrfid_parser.add_mutually_exclusive_group()
    cvrfid_format_group.add_argument('--json', action='store_const',
                                   dest='format', const='j', default='j')
    cvrfid_format_group.add_argument('--xml', action='store_const',
                                   dest='format', const='x')
    cvrfid_format_group.add_argument('--html', action='store_const',
                                   dest='format', const='h')


    cveid_parser = subparsers.add_parser('cveid')
    cveid_parser.set_defaults(which='cveid')

    cveid_parser.add_argument('cve',
                               type=str)

    cveid_format_group = cveid_parser.add_mutually_exclusive_group()
    cveid_format_group.add_argument('--json', action='store_const',
                                   dest='format', const='j', default='j')
    cveid_format_group.add_argument('--xml', action='store_const',
                                   dest='format', const='x')
    cveid_format_group.add_argument('--html', action='store_const',
                                   dest='format', const='h')


    dump_parser = subparsers.add_parser('dump')
    dump_parser.set_defaults(which='dump')

    dump_format_group = dump_parser.add_mutually_exclusive_group()
    dump_format_group.add_argument('--all', action='store_const',
                                   dest='format', const='a', default='a')
    dump_format_group.add_argument('--json', action='store_const',
                                   dest='format', const='j')
    dump_format_group.add_argument('--xml', action='store_const',
                                   dest='format', const='x')
    dump_format_group.add_argument('--html', action='store_const',
                                   dest='format', const='h')

    dump_parser.add_argument('--data-dir',
                             required=True,
                             type=str)


    args = parser.parse_args()

    if args.loglevel.upper() not in ALLOWED_LOGGING_LEVELS:
        print "Logging level must be one of: " + str(ALLOWED_LOGGING_LEVELS)
        sys.exit(1)

    redteam = RedTeam(no_tls_verify=args.notlsverify,
                loglevel=args.loglevel,
                mongo_host=args.mongohost,
                mongo_port=args.mongoport,
                mongo_username=args.mongouser,
                mongo_password=args.mongopassword,
                mongodb=args.mongodb)

    if args.which == 'build':
        redteam.build_nvd_cves(alldata=args.all, force=args.force, update=args.update)
        added_advisories = redteam.build_update_announce_messages(alldata=args.all, force=args.force, update=args.update)
        #redteam.build_cvrfs(added_advisories)

    elif args.which == 'cvrf':
        print redteam.query_cvrf_index(page=args.page,
                                       per_page=args.per_page,
                                       before_date=args.before,
                                       after_date=args.after,
                                       bug=args.bug,
                                       cve=args.cve,
                                       severity=args.severity,
                                       package=args.package)

    elif args.which == 'cvrfid':
        print redteam.query_cvrf(cvrfid=args.cvrf, output_format=args.format)

    elif args.which == 'cveid':
        print redteam.query_cve(cveid=args.cve, output_format=args.format)

    elif args.which == 'dump':
        redteam.dump(args.data_dir, args.format)


if __name__ == "__main__":
    main()

