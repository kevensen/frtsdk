#!/usr/bin/env python
import argparse
from datetime import datetime
import os
import sys
sys.path.append("../")
# pylint: disable=C0413,W0406
from redteam import RedTeam


def valid_iso_date(search_date):
    try:
        return datetime.strptime(search_date, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(search_date)
        raise argparse.ArgumentTypeError(msg)

def valid_severity(severity):
    severities = ['low', 'moderate', 'high', 'critical']
    if severity not in severities:
        msg = "Not a valid severity: '{0}'.".format(severity)
        raise argparse.ArgumentTypeError(msg)
    return severity

def main():
    parser = argparse.ArgumentParser(description='Tool to generate and serve the Enterprise Linux Security Data API.')
    subparsers = parser.add_subparsers()
    dir_path = os.path.dirname(os.path.realpath(__file__))
    default_api_dir = os.path.join(dir_path, '..', 'security-data-api')
    # General Options
    parser.add_argument('--notlsverify',
                        required=False,
                        action='store_true')

    parser.add_argument('--mongohost',
                        required=False,
                        type=str,
                        default='localhost')

    parser.add_argument('--mongoport',
                        required=False,
                        type=int,
                        default=27017)
    
    parser.add_argument('--mongouser',
                        required=False,
                        type=str)

    parser.add_argument('--mongopassword',
                        required=False,
                        type=str)
        
    parser.add_argument('--mongodb',
                        required=False,
                        default='sda',
                        type=str)
    
    parser.add_argument('--loglevel',
                        required=False,
                        default='info',
                        type=str)

    source_parser = subparsers.add_parser('source')
    source_parser.set_defaults(which='source')

    source_subparsers = source_parser.add_subparsers()

    source_load_subparser = source_subparsers.add_parser('load')
    source_load_subparser.set_defaults(subwhich='load')
    source_load_subparser.add_argument('--clean', action='store_true', required=False, help="Clear all sources and status from the database before loading sources from the config file.")

    sources_list_subparser = source_subparsers.add_parser('list')
    sources_list_subparser.set_defaults(subwhich='list')

    sources_reset_subparser = source_subparsers.add_parser('reset')
    sources_reset_subparser.set_defaults(subwhich='reset')

    sources_reset_subparser.add_argument('--id', type=int, dest='source_id', required=False)

    source_group = sources_list_subparser.add_mutually_exclusive_group()
    source_group.add_argument('--list-types', action='store_true', required=False)
    source_group.add_argument('--status', type=str, required=False, default='all')

    source_sync_subparser = source_subparsers.add_parser('sync')
    source_sync_subparser.set_defaults(subwhich='sync')
    source_sync_subparser.add_argument('--never-synced',
                                       required=False,
                                       action='store_true')
    source_sync_subparser.add_argument('--failed',
                                       required=False,
                                       action='store_true')
    source_sync_subparser.add_argument('--success',
                                       required=False,
                                       action='store_true')
    source_sync_subparser.add_argument('--id', type=int, dest='source_id', required=False)

    source_sync_subparser.add_argument('--skip-failures',
                                       required=False,
                                       action='store_true',
                                       help='If reading from a source fails, move on to the next source.  Default behavior is to exit.')


    cvrf_parser = subparsers.add_parser('cvrf')
    cvrf_parser.set_defaults(which='cvrf')

    cvrf_subparsers = cvrf_parser.add_subparsers()
    cvrf_rfresh_subparser = cvrf_subparsers.add_parser('refresh')
    cvrf_rfresh_subparser.set_defaults(subwhich='refresh')
    cvrf_rfresh_subparser.add_argument('--clean', action='store_true', required=False)

    search_parser = subparsers.add_parser('search')
    search_parser.set_defaults(which='search')
    search_subparaser = search_parser.add_subparsers()

    search_rpm_subparser = search_subparaser.add_parser('rpm')
    search_rpm_subparser.set_defaults(subwhich='rpm')

    search_rpm_subparser.add_argument('--name', type=str, required=True)
    search_rpm_subparser.add_argument('--version', type=str, required=False)
    search_rpm_subparser.add_argument('--release', type=str, required=False)

    args = parser.parse_args()




    redteam = RedTeam(no_tls_verify=args.notlsverify,
                loglevel=args.loglevel,
                mongo_host=args.mongohost,
                mongo_port=args.mongoport,
                mongo_username=args.mongouser,
                mongo_password=args.mongopassword,
                mongodb=args.mongodb)

    if args.which == 'source' and args.subwhich == 'load':
        redteam.load_sources(args.clean)
    elif args.which == 'source' and args.subwhich == 'list' and args.list_types:
        print redteam.list_types()
    elif args.which == 'source' and args.subwhich == 'list' and args.status:
        print redteam.list_sources(args.status)
    elif args.which == 'source' and args.subwhich == 'reset':
        redteam.reset_sources(args.source_id)

    elif args.which == 'source' and args.subwhich == 'sync':
        redteam.sync(never_synced=args.never_synced,
                     failed=args.failed,
                     success=args.success,
                     source_id=args.source_id,
                     skip_failures=args.skip_failures)

    elif args.which == 'cvrf' and args.subwhich == 'refresh':
        redteam.cvrf_refresh(args.clean)

    elif args.which == 'search' and args.subwhich == 'rpm':
        cves = redteam.cves_for_rpm(args.name, args.version, args.release)
        for cve in cves:
            print cve

    # if args.which == 'build':
    #     redteam.build_nvd_cves(alldata=args.all, force=args.force, update=args.update)
    #     added_advisories = redteam.build_update_announce_messages(alldata=args.all, force=args.force, update=args.update)
    #     #redteam.build_cvrfs(added_advisories)

    # elif args.which == 'cvrf':
    #     print redteam.query_cvrf_index(page=args.page,
    #                                    per_page=args.per_page,
    #                                    before_date=args.before,
    #                                    after_date=args.after,
    #                                    bug=args.bug,
    #                                    cve=args.cve,
    #                                    severity=args.severity,
    #                                    package=args.package)

    # elif args.which == 'cvrfid':
    #     print redteam.query_cvrf(cvrfid=args.cvrf, output_format=args.format)

    # elif args.which == 'cveid':
    #     print redteam.query_cve(cveid=args.cve, output_format=args.format)

    # elif args.which == 'dump':
    #     redteam.dump(args.data_dir, args.format)


if __name__ == "__main__":
    main()

